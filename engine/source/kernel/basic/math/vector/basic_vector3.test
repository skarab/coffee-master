#ifdef UNIT_TEST_REGISTER
    REGISTER_TEST(BasicMathVector3::Constructors);
    REGISTER_TEST(BasicMathVector3::Comparators);
    REGISTER_TEST(BasicMathVector3::GetDotProduct);
    REGISTER_TEST(BasicMathVector3::GetCrossProduct);
    REGISTER_TEST(BasicMathVector3::IsColinear);
    REGISTER_TEST(BasicMathVector3::IsOrthogonal);
    REGISTER_TEST(BasicMathVector3::GetOrthogonal);
    REGISTER_TEST(BasicMathVector3::GetAngle);
    REGISTER_TEST(BasicMathVector3::Normalize);    
#else
namespace unit_test
{
    TDOG_TEST_SUITE(BasicMathVector3)
    {
        TDOG_TEST_CASE(Constructors)
        {
            basic::Vector3 vector_null;
            TDOG_ASSERT(vector_null.X==0.0f);
            TDOG_ASSERT(vector_null.Y==0.0f);
            TDOG_ASSERT(vector_null.Z==0.0f);
            
            basic::Vector3 vector_one(1.0f);
            TDOG_ASSERT(vector_one.X==1.0f);
            TDOG_ASSERT(vector_one.Y==1.0f);
            TDOG_ASSERT(vector_one.Z==1.0f);
            
            basic::Vector3 vector_minus_one(-1.0f);
            TDOG_ASSERT(vector_minus_one.X==-1.0f);
            TDOG_ASSERT(vector_minus_one.Y==-1.0f);
            TDOG_ASSERT(vector_minus_one.Z==-1.0f);
            
            basic::Vector3 vector_custom(12.0f, -4.0f, 5.0f);
            TDOG_ASSERT(vector_custom.X==12.0f);
            TDOG_ASSERT(vector_custom.Y==-4.0f);
            TDOG_ASSERT(vector_custom.Z==5.0f);
        }

        TDOG_TEST_CASE(Comparators)
        {
            basic::Vector3 one(1.0f);
            basic::Vector3 two(2.0f);
            TDOG_ASSERT(one==one);
            TDOG_ASSERT(two==two);
            TDOG_ASSERT(one!=two);
            TDOG_ASSERT(one<two);
            TDOG_ASSERT(one<=two);
            TDOG_ASSERT(two>one);
            TDOG_ASSERT(two>=one);
            
            two /= 2.0f;
            TDOG_ASSERT(one==two);
            
            one *= 2.0f;
            TDOG_ASSERT(one>two);
            one.X = two.X;
            TDOG_ASSERT(one>=two);
            TDOG_ASSERT(two<=one);           
        }
        
        TDOG_TEST_CASE(GetDotProduct)
        {
            basic::Vector3 yvector(0.0f, 1.0f, 0.0f);
            basic::Vector3 xvector(1.0f, 0.0f, 0.0f);
            TDOG_ASSERT(IsEqual(yvector.GetDotProduct(yvector), 1.0f));
            TDOG_ASSERT(IsEqual(yvector.GetDotProduct(xvector), 0.0f));
            TDOG_ASSERT(IsEqual(yvector.GetDotProduct(-yvector), -1.0f));
        }
        
        TDOG_TEST_CASE(GetCrossProduct)
        {
            basic::Vector3 xvector(1.0f, 0.0f, 0.0f);
            basic::Vector3 yvector(0.0f, 1.0f, 0.0f);
            TDOG_ASSERT(xvector.GetCrossProduct(xvector).IsZero());
            TDOG_ASSERT(yvector.GetCrossProduct(yvector).IsZero());
            TDOG_ASSERT(xvector.GetCrossProduct(yvector)==basic::Vector3(0.0f, 0.0f, 1.0f));
            TDOG_ASSERT(yvector.GetCrossProduct(xvector)==basic::Vector3(0.0f, 0.0f, -1.0f));
        }
        
        TDOG_TEST_CASE(IsColinear)
        {
            basic::Vector3 yvector(0.0f, 1.0f, 0.0f);
            basic::Vector3 xvector(1.0f, 0.0f, 0.0f);
            TDOG_ASSERT(yvector.IsColinear(yvector));
            TDOG_ASSERT(yvector.IsColinear(-yvector));
            TDOG_ASSERT(xvector.IsColinear(xvector));
            TDOG_ASSERT(xvector.IsColinear(-xvector));
            TDOG_ASSERT(!yvector.IsColinear(xvector));
            TDOG_ASSERT(!yvector.IsColinear(-xvector));
        }
        
        TDOG_TEST_CASE(IsOrthogonal)
        {
            basic::Vector3 yvector(0.0f, 1.0f, 0.0f);
            basic::Vector3 xvector(1.0f, 0.0f, 0.0f);
            TDOG_ASSERT(!yvector.IsOrthogonal(yvector));
            TDOG_ASSERT(!yvector.IsOrthogonal(-yvector));
            TDOG_ASSERT(!xvector.IsOrthogonal(xvector));
            TDOG_ASSERT(!xvector.IsOrthogonal(-xvector));
            TDOG_ASSERT(yvector.IsOrthogonal(xvector));
            TDOG_ASSERT(yvector.IsOrthogonal(-xvector));
        }
        
        TDOG_TEST_CASE(GetOrthogonal)
        {
            basic::Vector3 yvector(0.0f, 1.0f, 0.0f);
            basic::Vector3 xvector(1.0f, 0.0f, 0.0f);
            TDOG_ASSERT(xvector.GetOrthogonal(yvector)==basic::Vector3(0.0f, 0.0f, 1.0f));
            TDOG_ASSERT(yvector.GetOrthogonal(xvector)==basic::Vector3(0.0f, 0.0f, -1.0f));
        }
        
        TDOG_TEST_CASE(GetAngle)
        {
            basic::Vector3 yvector(0.0f, 1.0f, 0.0f);
            basic::Vector3 xvector(1.0f, 0.0f, 0.0f);
            TDOG_ASSERT(xvector.GetAngle(yvector)==Pi/2.0f);
            TDOG_ASSERT(yvector.GetAngle(xvector)==Pi/2.0f);
        }
        
        TDOG_TEST_CASE(Normalize)
        {
            basic::Vector3 vector(0.0f, 1.0f, 0.0f);
            TDOG_ASSERT(IsEqual(vector.GetNorm(), 1.0f));
            TDOG_ASSERT(vector.IsNormalized());
            vector.Normalize();
            TDOG_ASSERT(vector.IsNormalized());
            vector.Set(5.0f, 12.0f, 42.0f);
            TDOG_ASSERT(!vector.IsNormalized());
            vector.Normalize();
            TDOG_ASSERT(vector.IsNormalized());            
        }

    }
}
#endif
