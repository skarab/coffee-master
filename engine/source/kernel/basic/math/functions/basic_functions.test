#ifdef UNIT_TEST_REGISTER
    REGISTER_TEST(BasicMathFunctions::Absolute);
    REGISTER_TEST(BasicMathFunctions::Clamp);
    REGISTER_TEST(BasicMathFunctions::ClampMinimum);
    REGISTER_TEST(BasicMathFunctions::ClampMaximum);
    REGISTER_TEST(BasicMathFunctions::Minimum);
    REGISTER_TEST(BasicMathFunctions::Maximum);
    REGISTER_TEST(BasicMathFunctions::IsEqual);
    REGISTER_TEST(BasicMathFunctions::Ceil);
    REGISTER_TEST(BasicMathFunctions::Floor);
#else
namespace unit_test
{
    TDOG_TEST_SUITE(BasicMathFunctions)
    {
        TDOG_TEST_CASE(Absolute)
        {
            TDOG_ASSERT(Absolute(1.0f)==1.0f);
            TDOG_ASSERT(Absolute(-1.0f)==1.0f);
            TDOG_ASSERT(Absolute(1)==1);
            TDOG_ASSERT(Absolute(-1)==1);
        }

        TDOG_TEST_CASE(Clamp)
        {
            {
                real value = -1.0f;
                Clamp(value, 0.0f, 6.0f);
                TDOG_ASSERT(value==0.0f);

                value = 5.0f;
                Clamp(value, 0.0f, 6.0f);
                TDOG_ASSERT(value==5.0f);

                value = 12.0f;
                Clamp(value, 0.0f, 6.0f);
                TDOG_ASSERT(value==6.0f);
            }
            {
                int32 value = -1;
                Clamp(value, 0, 6);
                TDOG_ASSERT(value==0);

                value = 5;
                Clamp(value, 0, 6);
                TDOG_ASSERT(value==5);

                value = 12;
                Clamp(value, 0, 6);
                TDOG_ASSERT(value==6);
            }
        }

        TDOG_TEST_CASE(ClampMinimum)
        {
            {
                real value = -1.0f;
                ClampMinimum(value, 0.0f);
                TDOG_ASSERT(value==0.0f);

                value = 5.0f;
                ClampMinimum(value, 0.0f);
                TDOG_ASSERT(value==5.0f);

                value = 12.0f;
                ClampMinimum(value, 0.0f);
                TDOG_ASSERT(value==12.0f);
            }
            {
                int32 value = -1;
                ClampMinimum(value, 0);
                TDOG_ASSERT(value==0);

                value = 5;
                ClampMinimum(value, 0);
                TDOG_ASSERT(value==5);

                value = 12;
                ClampMinimum(value, 0);
                TDOG_ASSERT(value==12);
            }
        }

        TDOG_TEST_CASE(ClampMaximum)
        {
            {
                real value = -1.0f;
                ClampMaximum(value, 6.0f);
                TDOG_ASSERT(value==-1.0f);

                value = 5.0f;
                ClampMaximum(value, 6.0f);
                TDOG_ASSERT(value==5.0f);

                value = 12.0f;
                ClampMaximum(value, 6.0f);
                TDOG_ASSERT(value==6.0f);
            }
            {
                int32 value = -1;
                ClampMaximum(value, 6);
                TDOG_ASSERT(value==-1);

                value = 5;
                ClampMaximum(value, 6);
                TDOG_ASSERT(value==5);

                value = 12;
                ClampMaximum(value, 6);
                TDOG_ASSERT(value==6);
            }
        }

        TDOG_TEST_CASE(Minimum)
        {
            TDOG_ASSERT(Minimum(-1.0f, 2.0f)==-1.0f);
            TDOG_ASSERT(Minimum(2.0f, -1.0f)==-1.0f);
            TDOG_ASSERT(Minimum(-1, 2)==-1);
            TDOG_ASSERT(Minimum(2, -1)==-1);
        }

        TDOG_TEST_CASE(Maximum)
        {
            TDOG_ASSERT(Maximum(-1.0f, 2.0f)==2.0f);
            TDOG_ASSERT(Maximum(2.0f, -1.0f)==2.0f);
            TDOG_ASSERT(Maximum(-1, 2)==2);
            TDOG_ASSERT(Maximum(2, -1)==2);
        }

        TDOG_TEST_CASE(IsEqual)
        {
            TDOG_ASSERT(!IsEqual(-1.0f, 2.0f));
            TDOG_ASSERT(IsNotEqual(-1.0f, 2.0f));
            TDOG_ASSERT(!IsEqual(2.0f, -1.0f));
            TDOG_ASSERT(IsNotEqual(2.0f, -1.0f));
            TDOG_ASSERT(!IsEqual(2.0f, 2.0001f));
            TDOG_ASSERT(IsNotEqual(2.0f, 2.0001f));
            TDOG_ASSERT(IsEqual(2.0f, 2.0f));
            TDOG_ASSERT(!IsNotEqual(2.0f, 2.0f));
            TDOG_ASSERT(IsRoughlyEqual(2.0f, 2.0001f, 0.0001f));
            TDOG_ASSERT(!IsRoughlyEqual(2.0f, 2.0001f, 0.00001f));
        }

        TDOG_TEST_CASE(Ceil)
        {
            TDOG_ASSERT(Ceil(2.3f)==3.0f);
            TDOG_ASSERT(Ceil(3.8f)==4.0f);
            TDOG_ASSERT(Ceil(-2.3f)==-2.0f);
            TDOG_ASSERT(Ceil(-3.8f)==-3.0f);
        }

        TDOG_TEST_CASE(Floor)
        {
            TDOG_ASSERT(Floor(2.3f)==2.0f);
            TDOG_ASSERT(Floor(3.8f)==3.0f);
            TDOG_ASSERT(Floor(-2.3f)==-3.0f);
            TDOG_ASSERT(Floor(-3.8f)==-4.0f);
        }
    }
}
#endif
