// Default helpers

vec2 PackDepth(float depth)
{
    return vec2(floor(depth)/256.0, fract(depth));
}

float UnpackDepth(vec2 depth)
{
    return (depth.x*256.0+depth.y);
}

vec3 PackNormal(vec3 normal)
{
    return normal+1.0;
}

vec3 UnpackNormal(vec3 normal)
{
    return normal-1.0;
}

vec2 ComputeParallax(vec2 uv, vec3 eye_vector, float height, float strength)
{
    vec2 camera_vector = normalize(eye_vector).xy;
    float h = height*strength - strength/2.0;
    return uv+camera_vector*h;
}   

vec3 RGBE(vec4 v)
{
    float exp = v.w*255.0-128.0;
	return v.xyz*exp2(exp);
}

#ifdef GL_EXT_gpu_shader4
vec3 ApplyShadows(vec3 color, sampler2DRect shadow_texture, float light_softness, vec2 uv)
{
    float soft = float(light_softness>0.01);
    return color*((1.0-soft)+soft*texture2DRect(shadow_texture, uv).x);
}
#endif
